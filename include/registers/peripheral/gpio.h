#ifndef GPIO_REGISTERS_H
#define GPIO_REGISTERS_H
/**
 * @copyright
 * @file gpio.h
 * @author Andrea Gianarda
 * @date 22nd of February 2021
 * @brief General purpose I/O registers
*/

#include <stdint.h>

#include "global/peripherals.h"

/**
 *  @defgroup RegisterGroup Register global macros, structure and functions
 *  @brief Registers global macros, structure and functions
 *  @{
 */

/**
 *  @ingroup RegisterGroup
 *  @defgroup GPIO General purpose I/O
 *  @brief GPIO General purpose I/O macros and structures
 *  @{
 */

typedef struct {
	RW uint32_t MODER;    /*!< Mode register                    (Offset 0x0)         */
	RW uint32_t OTYPER;   /*!< Output type register             (Offset 0x4)         */
	RW uint32_t OSPEEDR;  /*!< Output speed register            (Offset 0x8)         */
	RW uint32_t PUPDR;    /*!< Pull up/pull down register       (Offset 0xC)         */
	RO uint32_t IDR;      /*!< Input data register              (Offset 0x10)        */
	RW uint32_t ODR;      /*!< Output data register             (Offset 0x14)        */
	WO uint32_t BSRR;     /*!< Bit set/reset register           (Offset 0x18)        */
	RW uint32_t LCKR;     /*!< Port configuration lock register (Offset 0x1C)        */
	RW uint32_t AFRL[2];  /*!< Alternate function register      (Offset 0x20 - 0x24) */
} gpio_regs;

/*!< GPIO registers */
/*!< Mode register */
#define GPIO_MODER_MODER15_OFFSET (30U)
#define GPIO_MODER_MODER15_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER15))  /*!< Mask  0xC0000000 */

#define GPIO_MODER_MODER14_OFFSET (28U)
#define GPIO_MODER_MODER14_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER14))  /*!< Mask  0x30000000 */

#define GPIO_MODER_MODER13_OFFSET (26U)
#define GPIO_MODER_MODER13_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER13))  /*!< Mask  0x0C000000 */

#define GPIO_MODER_MODER12_OFFSET (24U)
#define GPIO_MODER_MODER12_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER12))  /*!< Mask  0x03000000 */

#define GPIO_MODER_MODER11_OFFSET (22U)
#define GPIO_MODER_MODER11_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER11))  /*!< Mask  0x00C00000 */

#define GPIO_MODER_MODER10_OFFSET (20U)
#define GPIO_MODER_MODER10_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER10))  /*!< Mask  0x00300000 */

#define GPIO_MODER_MODER9_OFFSET  (18U)
#define GPIO_MODER_MODER9_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER9))   /*!< Mask  0x000C0000 */

#define GPIO_MODER_MODER8_OFFSET  (16U)
#define GPIO_MODER_MODER8_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER8))   /*!< Mask  0x00030000 */

#define GPIO_MODER_MODER7_OFFSET  (14U)
#define GPIO_MODER_MODER7_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER7))   /*!< Mask  0x0000C000 */

#define GPIO_MODER_MODER6_OFFSET  (12U)
#define GPIO_MODER_MODER6_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER6))   /*!< Mask  0x00003000 */

#define GPIO_MODER_MODER5_OFFSET  (10U)
#define GPIO_MODER_MODER5_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER5))   /*!< Mask  0x00000C00 */

#define GPIO_MODER_MODER4_OFFSET  (8U)
#define GPIO_MODER_MODER4_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER4))   /*!< Mask  0x00000300 */

#define GPIO_MODER_MODER3_OFFSET  (6U)
#define GPIO_MODER_MODER3_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER3))   /*!< Mask  0x000000C0 */

#define GPIO_MODER_MODER2_OFFSET  (4U)
#define GPIO_MODER_MODER2_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER2))   /*!< Mask  0x00000030 */

#define GPIO_MODER_MODER1_OFFSET  (2U)
#define GPIO_MODER_MODER1_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER1))   /*!< Mask  0x0000000C */

#define GPIO_MODER_MODER0_OFFSET  (0U)
#define GPIO_MODER_MODER0_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, MODER, MODER0))   /*!< Mask  0x00000003 */

// Value of the GPIO mode for each GPIO pin
#define GPIO_MODE_INPUT    (0x0UL)  /*!< Value 0x00000000 */
#define GPIO_MODE_OUTPUT   (0x1UL)  /*!< Value 0x00000001 */
#define GPIO_MODE_ALTFUNC  (0x2UL)  /*!< Value 0x00000002 */
#define GPIO_MODE_ANALOG   (0x3UL)  /*!< Value 0x00000003 */

/*!< Output type register */
#define GPIO_OTYPER_OT15_OFFSET (15U)
#define GPIO_OTYPER_OT15_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT15))  /*!< Mask  0x00008000 */

#define GPIO_OTYPER_OT14_OFFSET (14U)
#define GPIO_OTYPER_OT14_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT14))  /*!< Mask  0x00004000 */

#define GPIO_OTYPER_OT13_OFFSET (13U)
#define GPIO_OTYPER_OT13_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT13))  /*!< Mask  0x00002000 */

#define GPIO_OTYPER_OT12_OFFSET (12U)
#define GPIO_OTYPER_OT12_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT12))  /*!< Mask  0x00001000 */

#define GPIO_OTYPER_OT11_OFFSET (11U)
#define GPIO_OTYPER_OT11_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT11))  /*!< Mask  0x00000800 */

#define GPIO_OTYPER_OT10_OFFSET (10U)
#define GPIO_OTYPER_OT10_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT10))  /*!< Mask  0x00000400 */

#define GPIO_OTYPER_OT9_OFFSET  (9U)
#define GPIO_OTYPER_OT9_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT9))   /*!< Mask  0x00000200 */

#define GPIO_OTYPER_OT8_OFFSET  (8U)
#define GPIO_OTYPER_OT8_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT8))   /*!< Mask  0x00000100 */

#define GPIO_OTYPER_OT7_OFFSET  (7U)
#define GPIO_OTYPER_OT7_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT7))   /*!< Mask  0x00000080 */

#define GPIO_OTYPER_OT6_OFFSET  (6U)
#define GPIO_OTYPER_OT6_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT6))   /*!< Mask  0x00000040 */

#define GPIO_OTYPER_OT5_OFFSET  (5U)
#define GPIO_OTYPER_OT5_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT5))   /*!< Mask  0x00000020 */

#define GPIO_OTYPER_OT4_OFFSET  (4U)
#define GPIO_OTYPER_OT4_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT4))   /*!< Mask  0x00000010 */

#define GPIO_OTYPER_OT3_OFFSET  (3U)
#define GPIO_OTYPER_OT3_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT3))   /*!< Mask  0x00000008 */

#define GPIO_OTYPER_OT2_OFFSET  (2U)
#define GPIO_OTYPER_OT2_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT2))   /*!< Mask  0x00000004 */

#define GPIO_OTYPER_OT1_OFFSET  (1U)
#define GPIO_OTYPER_OT1_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT1))   /*!< Mask  0x00000002 */

#define GPIO_OTYPER_OT0_OFFSET  (0U)
#define GPIO_OTYPER_OT0_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, OTYPER, OT0))   /*!< Mask  0x00000001 */

// Value of output type registers for each GPIO pin
#define GPIO_OTYPE_PUSHPULL   (0x0UL)  /*!< Value 0x00000000 */
#define GPIO_OTYPE_OPENDRAIN  (0x1UL)  /*!< Value 0x00000001 */

/*!< Output speed register */
#define GPIO_OSPEEDR_OSPEEDR15_OFFSET (30U)
#define GPIO_OSPEEDR_OSPEEDR15_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR15))  /*!< Mask  0xC0000000 */

#define GPIO_OSPEEDR_OSPEEDR14_OFFSET (28U)
#define GPIO_OSPEEDR_OSPEEDR14_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR14))  /*!< Mask  0x30000000 */

#define GPIO_OSPEEDR_OSPEEDR13_OFFSET (26U)
#define GPIO_OSPEEDR_OSPEEDR13_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR13))  /*!< Mask  0x0C000000 */

#define GPIO_OSPEEDR_OSPEEDR12_OFFSET (24U)
#define GPIO_OSPEEDR_OSPEEDR12_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR12))  /*!< Mask  0x03000000 */

#define GPIO_OSPEEDR_OSPEEDR11_OFFSET (22U)
#define GPIO_OSPEEDR_OSPEEDR11_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR11))  /*!< Mask  0x00C00000 */

#define GPIO_OSPEEDR_OSPEEDR10_OFFSET (20U)
#define GPIO_OSPEEDR_OSPEEDR10_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR10))  /*!< Mask  0x00300000 */

#define GPIO_OSPEEDR_OSPEEDR9_OFFSET  (18U)
#define GPIO_OSPEEDR_OSPEEDR9_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR9))   /*!< Mask  0x000C0000 */

#define GPIO_OSPEEDR_OSPEEDR8_OFFSET  (16U)
#define GPIO_OSPEEDR_OSPEEDR8_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR8))   /*!< Mask  0x00030000 */

#define GPIO_OSPEEDR_OSPEEDR7_OFFSET  (14U)
#define GPIO_OSPEEDR_OSPEEDR7_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR7))   /*!< Mask  0x0000C000 */

#define GPIO_OSPEEDR_OSPEEDR6_OFFSET  (12U)
#define GPIO_OSPEEDR_OSPEEDR6_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR6))   /*!< Mask  0x00003000 */

#define GPIO_OSPEEDR_OSPEEDR5_OFFSET  (10U)
#define GPIO_OSPEEDR_OSPEEDR5_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR5))   /*!< Mask  0x00000C00 */

#define GPIO_OSPEEDR_OSPEEDR4_OFFSET  (8U)
#define GPIO_OSPEEDR_OSPEEDR4_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR4))   /*!< Mask  0x00000300 */

#define GPIO_OSPEEDR_OSPEEDR3_OFFSET  (6U)
#define GPIO_OSPEEDR_OSPEEDR3_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR3))   /*!< Mask  0x000000C0 */

#define GPIO_OSPEEDR_OSPEEDR2_OFFSET  (4U)
#define GPIO_OSPEEDR_OSPEEDR2_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR2))   /*!< Mask  0x00000020 */

#define GPIO_OSPEEDR_OSPEEDR1_OFFSET  (2U)
#define GPIO_OSPEEDR_OSPEEDR1_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR1))   /*!< Mask  0x0000000C */

#define GPIO_OSPEEDR_OSPEEDR0_OFFSET  (0U)
#define GPIO_OSPEEDR_OSPEEDR0_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, OSPEEDR, OSPEEDR0))   /*!< Mask  0x00000003 */

// Value of speed registers for each GPIO pin
#define GPIO_SPEED_LOW       (0x0UL)  /*!< Value 0x00000000 */
#define GPIO_SPEED_MEDIUM    (0x1UL)  /*!< Value 0x00000001 */
#define GPIO_SPEED_HIGH      (0x2UL)  /*!< Value 0x00000002 */
#define GPIO_SPEED_VERYHIGH  (0x3UL)  /*!< Value 0x00000003 */

/*!< Pull up/pull down register */
#define GPIO_PUPDR_PUPDR15_OFFSET (30U)
#define GPIO_PUPDR_PUPDR15_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR15))  /*!< Mask  0xC0000000 */

#define GPIO_PUPDR_PUPDR14_OFFSET (28U)
#define GPIO_PUPDR_PUPDR14_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR14))  /*!< Mask  0x30000000 */

#define GPIO_PUPDR_PUPDR13_OFFSET (26U)
#define GPIO_PUPDR_PUPDR13_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR13))  /*!< Mask  0x0C000000 */

#define GPIO_PUPDR_PUPDR12_OFFSET (24U)
#define GPIO_PUPDR_PUPDR12_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR12))  /*!< Mask  0x03000000 */

#define GPIO_PUPDR_PUPDR11_OFFSET (22U)
#define GPIO_PUPDR_PUPDR11_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR11))  /*!< Mask  0x00C00000 */

#define GPIO_PUPDR_PUPDR10_OFFSET (20U)
#define GPIO_PUPDR_PUPDR10_MASK   (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR10))  /*!< Mask  0x00300000 */

#define GPIO_PUPDR_PUPDR9_OFFSET  (18U)
#define GPIO_PUPDR_PUPDR9_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR9))   /*!< Mask  0x000C0000 */

#define GPIO_PUPDR_PUPDR8_OFFSET  (16U)
#define GPIO_PUPDR_PUPDR8_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR8))   /*!< Mask  0x00030000 */

#define GPIO_PUPDR_PUPDR7_OFFSET  (14U)
#define GPIO_PUPDR_PUPDR7_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR7))   /*!< Mask  0x0000C000 */

#define GPIO_PUPDR_PUPDR6_OFFSET  (12U)
#define GPIO_PUPDR_PUPDR6_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR6))   /*!< Mask  0x00003000 */

#define GPIO_PUPDR_PUPDR5_OFFSET  (10U)
#define GPIO_PUPDR_PUPDR5_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR5))   /*!< Mask  0x00000C00 */

#define GPIO_PUPDR_PUPDR4_OFFSET  (8U)
#define GPIO_PUPDR_PUPDR4_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR4))   /*!< Mask  0x00000300 */

#define GPIO_PUPDR_PUPDR3_OFFSET  (6U)
#define GPIO_PUPDR_PUPDR3_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR3))   /*!< Mask  0x000000C0 */

#define GPIO_PUPDR_PUPDR2_OFFSET  (4U)
#define GPIO_PUPDR_PUPDR2_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR2))   /*!< Mask  0x00000020 */

#define GPIO_PUPDR_PUPDR1_OFFSET  (2U)
#define GPIO_PUPDR_PUPDR1_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR1))   /*!< Mask  0x0000000C */

#define GPIO_PUPDR_PUPDR0_OFFSET  (0U)
#define GPIO_PUPDR_PUPDR0_MASK    (0x3UL << REGISTER_FIELD_OFFSET(GPIO, PUPDR, PUPDR0))   /*!< Mask  0x00000003 */

// Value of pull up or pull down for each GPIO pin
#define GPIO_NOPUPD  (0x0UL)  /*!< Value 0x00000000 */
#define GPIO_PU      (0x1UL)  /*!< Value 0x00000001 */
#define GPIO_PD      (0x2UL)  /*!< Value 0x00000002 */

/*!< Input data register */
#define GPIO_IDR_IDR15_OFFSET (15U)
#define GPIO_IDR_IDR15_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR15))  /*!< Mask  0x00008000 */

#define GPIO_IDR_IDR14_OFFSET (14U)
#define GPIO_IDR_IDR14_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR14))  /*!< Mask  0x00004000 */

#define GPIO_IDR_IDR13_OFFSET (13U)
#define GPIO_IDR_IDR13_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR13))  /*!< Mask  0x00002000 */

#define GPIO_IDR_IDR12_OFFSET (12U)
#define GPIO_IDR_IDR12_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR12))  /*!< Mask  0x00001000 */

#define GPIO_IDR_IDR11_OFFSET (11U)
#define GPIO_IDR_IDR11_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR11))  /*!< Mask  0x00000800 */

#define GPIO_IDR_IDR10_OFFSET (10U)
#define GPIO_IDR_IDR10_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR10))  /*!< Mask  0x00000400 */

#define GPIO_IDR_IDR9_OFFSET  (9U)
#define GPIO_IDR_IDR9_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR9))   /*!< Mask  0x00000200 */

#define GPIO_IDR_IDR8_OFFSET  (8U)
#define GPIO_IDR_IDR8_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR8))   /*!< Mask  0x00000100 */

#define GPIO_IDR_IDR7_OFFSET  (7U)
#define GPIO_IDR_IDR7_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR7))   /*!< Mask  0x00000080 */

#define GPIO_IDR_IDR6_OFFSET  (6U)
#define GPIO_IDR_IDR6_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR6))   /*!< Mask  0x00000040 */

#define GPIO_IDR_IDR5_OFFSET  (5U)
#define GPIO_IDR_IDR5_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR5))   /*!< Mask  0x00000020 */

#define GPIO_IDR_IDR4_OFFSET  (4U)
#define GPIO_IDR_IDR4_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR4))   /*!< Mask  0x00000010 */

#define GPIO_IDR_IDR3_OFFSET  (3U)
#define GPIO_IDR_IDR3_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR3))   /*!< Mask  0x00000008 */

#define GPIO_IDR_IDR2_OFFSET  (2U)
#define GPIO_IDR_IDR2_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR2))   /*!< Mask  0x00000004 */

#define GPIO_IDR_IDR1_OFFSET  (1U)
#define GPIO_IDR_IDR1_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR1))   /*!< Mask  0x00000002 */

#define GPIO_IDR_IDR0_OFFSET  (0U)
#define GPIO_IDR_IDR0_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, IDR, IDR0))   /*!< Mask  0x00000001 */

/*!< Output data register */
#define GPIO_ODR_ODR15_OFFSET (15U)
#define GPIO_ODR_ODR15_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR15))  /*!< Mask  0x00008000 */

#define GPIO_ODR_ODR14_OFFSET (14U)
#define GPIO_ODR_ODR14_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR14))  /*!< Mask  0x00004000 */

#define GPIO_ODR_ODR13_OFFSET (13U)
#define GPIO_ODR_ODR13_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR13))  /*!< Mask  0x00002000 */

#define GPIO_ODR_ODR12_OFFSET (12U)
#define GPIO_ODR_ODR12_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR12))  /*!< Mask  0x00001000 */

#define GPIO_ODR_ODR11_OFFSET (11U)
#define GPIO_ODR_ODR11_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR11))  /*!< Mask  0x00000800 */

#define GPIO_ODR_ODR10_OFFSET (10U)
#define GPIO_ODR_ODR10_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR10))  /*!< Mask  0x00000400 */

#define GPIO_ODR_ODR9_OFFSET  (9U)
#define GPIO_ODR_ODR9_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR9))   /*!< Mask  0x00000200 */

#define GPIO_ODR_ODR8_OFFSET  (8U)
#define GPIO_ODR_ODR8_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR8))   /*!< Mask  0x00000100 */

#define GPIO_ODR_ODR7_OFFSET  (7U)
#define GPIO_ODR_ODR7_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR7))   /*!< Mask  0x00000080 */

#define GPIO_ODR_ODR6_OFFSET  (6U)
#define GPIO_ODR_ODR6_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR6))   /*!< Mask  0x00000040 */

#define GPIO_ODR_ODR5_OFFSET  (5U)
#define GPIO_ODR_ODR5_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR5))   /*!< Mask  0x00000020 */

#define GPIO_ODR_ODR4_OFFSET  (4U)
#define GPIO_ODR_ODR4_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR4))   /*!< Mask  0x00000010 */

#define GPIO_ODR_ODR3_OFFSET  (3U)
#define GPIO_ODR_ODR3_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR3))   /*!< Mask  0x00000008 */

#define GPIO_ODR_ODR2_OFFSET  (2U)
#define GPIO_ODR_ODR2_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR2))   /*!< Mask  0x00000004 */

#define GPIO_ODR_ODR1_OFFSET  (1U)
#define GPIO_ODR_ODR1_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR1))   /*!< Mask  0x00000002 */

#define GPIO_ODR_ODR0_OFFSET  (0U)
#define GPIO_ODR_ODR0_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, ODR, ODR0))   /*!< Mask  0x00000001 */

// Value of each GPIO pin
#define GPIO_0  (0x0UL)  /*!< Value 0x00000000 */
#define GPIO_1  (0x1UL)  /*!< Value 0x00000001 */

/*!< Bit set/reset register */
#define GPIO_BSRR_BR15_OFFSET (31U)
#define GPIO_BSRR_BR15_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR15))  /*!< Mask  0x80000000 */

#define GPIO_BSRR_BR14_OFFSET (30U)
#define GPIO_BSRR_BR14_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR14))  /*!< Mask  0x40000000 */

#define GPIO_BSRR_BR13_OFFSET (29U)
#define GPIO_BSRR_BR13_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR13))  /*!< Mask  0x20000000 */

#define GPIO_BSRR_BR12_OFFSET (28U)
#define GPIO_BSRR_BR12_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR12))  /*!< Mask  0x10000000 */

#define GPIO_BSRR_BR11_OFFSET (27U)
#define GPIO_BSRR_BR11_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR11))  /*!< Mask  0x08000000 */

#define GPIO_BSRR_BR10_OFFSET (26U)
#define GPIO_BSRR_BR10_MASK   (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR10))  /*!< Mask  0x04000000 */

#define GPIO_BSRR_BR9_OFFSET  (25U)
#define GPIO_BSRR_BR9_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR9))   /*!< Mask  0x02000000 */

#define GPIO_BSRR_BR8_OFFSET  (24U)
#define GPIO_BSRR_BR8_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR8))   /*!< Mask  0x01000000 */

#define GPIO_BSRR_BR7_OFFSET  (23U)
#define GPIO_BSRR_BR7_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR7))   /*!< Mask  0x00800000 */

#define GPIO_BSRR_BR6_OFFSET  (22U)
#define GPIO_BSRR_BR6_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR6))   /*!< Mask  0x00400000 */

#define GPIO_BSRR_BR5_OFFSET  (21U)
#define GPIO_BSRR_BR5_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR5))   /*!< Mask  0x00200000 */

#define GPIO_BSRR_BR4_OFFSET  (20U)
#define GPIO_BSRR_BR4_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR4))   /*!< Mask  0x00100000 */

#define GPIO_BSRR_BR3_OFFSET  (19U)
#define GPIO_BSRR_BR3_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR3))   /*!< Mask  0x00080000 */

#define GPIO_BSRR_BR2_OFFSET  (18U)
#define GPIO_BSRR_BR2_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR2))   /*!< Mask  0x00040000 */

#define GPIO_BSRR_BR1_OFFSET  (17U)
#define GPIO_BSRR_BR1_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR1))   /*!< Mask  0x00020000 */

#define GPIO_BSRR_BR0_OFFSET  (16U)
#define GPIO_BSRR_BR0_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BR0))   /*!< Mask  0x00010000 */

#define GPIO_BSRR_BS15_OFFSET   (15U)
#define GPIO_BSRR_BS15_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS15))    /*!< Mask  0x00008000 */

#define GPIO_BSRR_BS14_OFFSET   (14U)
#define GPIO_BSRR_BS14_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS14))    /*!< Mask  0x00004000 */

#define GPIO_BSRR_BS13_OFFSET   (13U)
#define GPIO_BSRR_BS13_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS13))    /*!< Mask  0x00002000 */

#define GPIO_BSRR_BS12_OFFSET   (12U)
#define GPIO_BSRR_BS12_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS12))    /*!< Mask  0x00001000 */

#define GPIO_BSRR_BS11_OFFSET   (11U)
#define GPIO_BSRR_BS11_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS11))    /*!< Mask  0x00000800 */

#define GPIO_BSRR_BS10_OFFSET   (10U)
#define GPIO_BSRR_BS10_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS10))    /*!< Mask  0x00000400 */

#define GPIO_BSRR_BS9_OFFSET    (9U)
#define GPIO_BSRR_BS9_MASK      (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS9))     /*!< Mask  0x00000200 */

#define GPIO_BSRR_BS8_OFFSET    (8U)
#define GPIO_BSRR_BS8_MASK      (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS8))     /*!< Mask  0x00000100 */

#define GPIO_BSRR_BS7_OFFSET    (7U)
#define GPIO_BSRR_BS7_MASK      (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS7))     /*!< Mask  0x00000080 */

#define GPIO_BSRR_BS6_OFFSET    (6U)
#define GPIO_BSRR_BS6_MASK      (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS6))     /*!< Mask  0x00000040 */

#define GPIO_BSRR_BS5_OFFSET    (5U)
#define GPIO_BSRR_BS5_MASK      (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS5))     /*!< Mask  0x00000020 */

#define GPIO_BSRR_BS4_OFFSET    (4U)
#define GPIO_BSRR_BS4_MASK      (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS4))     /*!< Mask  0x00000010 */

#define GPIO_BSRR_BS3_OFFSET    (3U)
#define GPIO_BSRR_BS3_MASK      (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS3))     /*!< Mask  0x00000008 */

#define GPIO_BSRR_BS2_OFFSET    (2U)
#define GPIO_BSRR_BS2_MASK      (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS2))     /*!< Mask  0x00000004 */

#define GPIO_BSRR_BS1_OFFSET    (1U)
#define GPIO_BSRR_BS1_MASK      (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS1))     /*!< Mask  0x00000002 */

#define GPIO_BSRR_BS0_OFFSET    (0U)
#define GPIO_BSRR_BS0_MASK      (0x1UL << REGISTER_FIELD_OFFSET(GPIO, BSRR, BS0))     /*!< Mask  0x00000001 */

// Value of reset triggering for each GPIO pin
#define GPIO_NORESETODATA  (0x0UL)  /*!< Value 0x00000000 */
#define GPIO_RESETODATA    (0x1UL)  /*!< Value 0x00000001 */

// Value of set triggering for each GPIO pin
#define GPIO_NOSETODATA  (0x0UL)  /*!< Value 0x00000000 */
#define GPIO_SETODATA    (0x1UL)  /*!< Value 0x00000001 */

/*!< Port configuration lock register */
#define GPIO_LCKR_LCKK_OFFSET   (16U)
#define GPIO_LCKR_LCKK_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCKK))  /*!< Mask  0x00010000 */

#define GPIO_LCKR_LCK15_OFFSET  (15U)
#define GPIO_LCKR_LCK15_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK15))    /*!< Mask  0x00008000 */

#define GPIO_LCKR_LCK14_OFFSET  (14U)
#define GPIO_LCKR_LCK14_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK14))    /*!< Mask  0x00004000 */

#define GPIO_LCKR_LCK13_OFFSET  (13U)
#define GPIO_LCKR_LCK13_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK13))    /*!< Mask  0x00002000 */

#define GPIO_LCKR_LCK12_OFFSET  (12U)
#define GPIO_LCKR_LCK12_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK12))    /*!< Mask  0x00001000 */

#define GPIO_LCKR_LCK11_OFFSET  (11U)
#define GPIO_LCKR_LCK11_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK11))    /*!< Mask  0x00000800 */

#define GPIO_LCKR_LCK10_OFFSET  (10U)
#define GPIO_LCKR_LCK10_MASK    (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK10))    /*!< Mask  0x00000400 */

#define GPIO_LCKR_LCK9_OFFSET   (9U)
#define GPIO_LCKR_LCK9_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK9))     /*!< Mask  0x00000200 */

#define GPIO_LCKR_LCK8_OFFSET   (8U)
#define GPIO_LCKR_LCK8_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK8))     /*!< Mask  0x00000100 */

#define GPIO_LCKR_LCK7_OFFSET   (7U)
#define GPIO_LCKR_LCK7_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK7))     /*!< Mask  0x00000080 */

#define GPIO_LCKR_LCK6_OFFSET   (6U)
#define GPIO_LCKR_LCK6_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK6))     /*!< Mask  0x00000040 */

#define GPIO_LCKR_LCK5_OFFSET   (5U)
#define GPIO_LCKR_LCK5_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK5))     /*!< Mask  0x00000020 */

#define GPIO_LCKR_LCK4_OFFSET   (4U)
#define GPIO_LCKR_LCK4_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK4))     /*!< Mask  0x00000010 */

#define GPIO_LCKR_LCK3_OFFSET   (3U)
#define GPIO_LCKR_LCK3_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK3))     /*!< Mask  0x00000008 */

#define GPIO_LCKR_LCK2_OFFSET   (2U)
#define GPIO_LCKR_LCK2_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK2))     /*!< Mask  0x00000004 */

#define GPIO_LCKR_LCK1_OFFSET   (1U)
#define GPIO_LCKR_LCK1_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK1))     /*!< Mask  0x00000002 */

#define GPIO_LCKR_LCK0_OFFSET   (0U)
#define GPIO_LCKR_LCK0_MASK     (0x1UL << REGISTER_FIELD_OFFSET(GPIO, LCKR, LCK0))     /*!< Mask  0x00000001 */

// Value of lock key active bit
#define GPIO_LOCKKEY_NOTACTIVE  (0x0UL)  /*!< Mask  0x00000000 */
#define GPIO_LOCKKEY_ACTIVE     (0x1UL)  /*!< Mask  0x00000001 */

// Value of lock configuration for each GPIO pin
#define GPIO_CFGUNLOCKED  (0x0UL)  /*!< Mask  0x00000000 */
#define GPIO_CFGLOCKED    (0x1UL)  /*!< Mask  0x00000001 */

/*!< Alternate function register */
#define GPIO_AFRL_AFR15_OFFSET (28U)
#define GPIO_AFRL_AFR15_MASK   (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR15))  /*!< Mask  0xF0000000 */

#define GPIO_AFRL_AFR14_OFFSET (24U)
#define GPIO_AFRL_AFR14_MASK   (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR14))  /*!< Mask  0x0F000000 */

#define GPIO_AFRL_AFR13_OFFSET (20U)
#define GPIO_AFRL_AFR13_MASK   (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR13))  /*!< Mask  0x00F00000 */

#define GPIO_AFRL_AFR12_OFFSET (16U)
#define GPIO_AFRL_AFR12_MASK   (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR12))  /*!< Mask  0x000F0000 */

#define GPIO_AFRL_AFR11_OFFSET (12U)
#define GPIO_AFRL_AFR11_MASK   (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR11))  /*!< Mask  0x0000F000 */

#define GPIO_AFRL_AFR10_OFFSET (8U)
#define GPIO_AFRL_AFR10_MASK   (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR10))  /*!< Mask  0x00000F00 */

#define GPIO_AFRL_AFR9_OFFSET  (4U)
#define GPIO_AFRL_AFR9_MASK    (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR9))   /*!< Mask  0x000000F0 */

#define GPIO_AFRL_AFR8_OFFSET  (0U)
#define GPIO_AFRL_AFR8_MASK    (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR8))   /*!< Mask  0x0000000F */

#define GPIO_AFRL_AFR7_OFFSET  (28U)
#define GPIO_AFRL_AFR7_MASK    (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR7))   /*!< Mask  0xF0000000 */

#define GPIO_AFRL_AFR6_OFFSET  (24U)
#define GPIO_AFRL_AFR6_MASK    (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR6))   /*!< Mask  0x0F000000 */

#define GPIO_AFRL_AFR5_OFFSET  (20U)
#define GPIO_AFRL_AFR5_MASK    (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR5))   /*!< Mask  0x00F00000 */

#define GPIO_AFRL_AFR4_OFFSET  (16U)
#define GPIO_AFRL_AFR4_MASK    (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR4))   /*!< Mask  0x000F0000 */

#define GPIO_AFRL_AFR3_OFFSET  (12U)
#define GPIO_AFRL_AFR3_MASK    (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR3))   /*!< Mask  0x0000F000 */

#define GPIO_AFRL_AFR2_OFFSET  (8U)
#define GPIO_AFRL_AFR2_MASK    (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR2))   /*!< Mask  0x00000F00 */

#define GPIO_AFRL_AFR1_OFFSET  (4U)
#define GPIO_AFRL_AFR1_MASK    (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR1))   /*!< Mask  0x000000F0 */

#define GPIO_AFRL_AFR0_OFFSET  (0U)
#define GPIO_AFRL_AFR0_MASK    (0xFUL << REGISTER_FIELD_OFFSET(GPIO, AFRL, AFR0))   /*!< Mask  0x0000000F */

// Value of alternative function for each GPIO pin
#define GPIO_ALTFUNC0   (0x0UL)  /*!< Value 0x00000000 */
#define GPIO_ALTFUNC1   (0x1UL)  /*!< Value 0x00000001 */
#define GPIO_ALTFUNC2   (0x2UL)  /*!< Value 0x00000002 */
#define GPIO_ALTFUNC3   (0x3UL)  /*!< Value 0x00000003 */
#define GPIO_ALTFUNC4   (0x4UL)  /*!< Value 0x00000004 */
#define GPIO_ALTFUNC5   (0x5UL)  /*!< Value 0x00000005 */
#define GPIO_ALTFUNC6   (0x6UL)  /*!< Value 0x00000006 */
#define GPIO_ALTFUNC7   (0x7UL)  /*!< Value 0x00000007 */
#define GPIO_ALTFUNC8   (0x8UL)  /*!< Value 0x00000008 */
#define GPIO_ALTFUNC9   (0x9UL)  /*!< Value 0x00000009 */
#define GPIO_ALTFUNC10  (0xAUL)  /*!< Value 0x0000000A */
#define GPIO_ALTFUNC11  (0xBUL)  /*!< Value 0x0000000B */
#define GPIO_ALTFUNC12  (0xCUL)  /*!< Value 0x0000000C */
#define GPIO_ALTFUNC13  (0xDUL)  /*!< Value 0x0000000D */
#define GPIO_ALTFUNC14  (0xEUL)  /*!< Value 0x0000000E */
#define GPIO_ALTFUNC15  (0xFUL)  /*!< Value 0x0000000F */

#define GPIO_OFFSET 0x0UL
#define GPIO_BASE (D3_AHB4_BASE + GPIO_OFFSET)
#define GPIO_ADDRESS_RANGE 0x400UL

/*!< GPIO registers for GPIO A */
#define GPIO_GPIOA_OFFSET (0*GPIO_ADDRESS_RANGE)
#define GPIO_GPIOA_BASE OFFSET_ADDRESS(GPIO_BASE, GPIO_GPIOA_OFFSET)
#define GPIO_GPIOA REGISTER_PTR(gpio_regs, GPIO_GPIOA_BASE)

/*!< GPIO registers for GPIO B */
#define GPIO_GPIOB_OFFSET (1*GPIO_ADDRESS_RANGE)
#define GPIO_GPIOB_BASE OFFSET_ADDRESS(GPIO_BASE, GPIO_GPIOB_OFFSET)
#define GPIO_GPIOB REGISTER_PTR(gpio_regs, GPIO_GPIOB_BASE)

/*!< GPIO registers for GPIO C */
#define GPIO_GPIOC_OFFSET (2*GPIO_ADDRESS_RANGE)
#define GPIO_GPIOC_BASE OFFSET_ADDRESS(GPIO_BASE, GPIO_GPIOC_OFFSET)
#define GPIO_GPIOC REGISTER_PTR(gpio_regs, GPIO_GPIOC_BASE)

/*!< GPIO registers for GPIO D */
#define GPIO_GPIOD_OFFSET (3*GPIO_ADDRESS_RANGE)
#define GPIO_GPIOD_BASE OFFSET_ADDRESS(GPIO_BASE, GPIO_GPIOD_OFFSET)
#define GPIO_GPIOD REGISTER_PTR(gpio_regs, GPIO_GPIOD_BASE)

/*!< GPIO registers for GPIO E */
#define GPIO_GPIOE_OFFSET (4*GPIO_ADDRESS_RANGE)
#define GPIO_GPIOE_BASE OFFSET_ADDRESS(GPIO_BASE, GPIO_GPIOE_OFFSET)
#define GPIO_GPIOE REGISTER_PTR(gpio_regs, GPIO_GPIOE_BASE)

/*!< GPIO registers for GPIO F */
#define GPIO_GPIOF_OFFSET (5*GPIO_ADDRESS_RANGE)
#define GPIO_GPIOF_BASE OFFSET_ADDRESS(GPIO_BASE, GPIO_GPIOF_OFFSET)
#define GPIO_GPIOF REGISTER_PTR(gpio_regs, GPIO_GPIOF_BASE)

/*!< GPIO registers for GPIO G */
#define GPIO_GPIOG_OFFSET (6*GPIO_ADDRESS_RANGE)
#define GPIO_GPIOG_BASE OFFSET_ADDRESS(GPIO_BASE, GPIO_GPIOG_OFFSET)
#define GPIO_GPIOG REGISTER_PTR(gpio_regs, GPIO_GPIOG_BASE)

/*!< GPIO registers for GPIO H */
#define GPIO_GPIOH_OFFSET (7*GPIO_ADDRESS_RANGE)
#define GPIO_GPIOH_BASE OFFSET_ADDRESS(GPIO_BASE, GPIO_GPIOH_OFFSET)
#define GPIO_GPIOH REGISTER_PTR(gpio_regs, GPIO_GPIOH_BASE)

/*!< GPIO registers for GPIO I */
#define GPIO_GPIOI_OFFSET (8*GPIO_ADDRESS_RANGE)
#define GPIO_GPIOI_BASE OFFSET_ADDRESS(GPIO_BASE, GPIO_GPIOI_OFFSET)
#define GPIO_GPIOI REGISTER_PTR(gpio_regs, GPIO_GPIOI_BASE)

/*!< GPIO registers for GPIO J */
#define GPIO_GPIOJ_OFFSET (9*GPIO_ADDRESS_RANGE)
#define GPIO_GPIOJ_BASE OFFSET_ADDRESS(GPIO_BASE, GPIO_GPIOJ_OFFSET)
#define GPIO_GPIOJ REGISTER_PTR(gpio_regs, GPIO_GPIOJ_BASE)

/*!< GPIO registers for GPIO K */
#define GPIO_GPIOK_OFFSET (10*GPIO_ADDRESS_RANGE)
#define GPIO_GPIOK_BASE OFFSET_ADDRESS(GPIO_BASE, GPIO_GPIOK_OFFSET)
#define GPIO_GPIOK REGISTER_PTR(gpio_regs, GPIO_GPIOK_BASE)

/** @} */ // End of GPIO group

/** @} */ // End of RegisterGroup group

#endif // GPIO_REGISTERS_H
